{
  "Stateless Componet": {
    "prefix": "SC",
    "body": [
      "import * as React from 'react';",
      "",
      "class Props { }",
      "",
      "const CMP: React.SFC<Props> = ({ }) => (",
      "  return <div />;",
      ")",
      "",
      "CMP.defaultProps = new Props();",
      "",
      "export default CMP;"
    ],
    "description": "Stateless Componet"
  },
  "Class Componet": {
    "prefix": "CC",
    "body": [
      "import * as React from 'react';",
      "",
      "interface State {}",
      "",
      "class Props {}",
      "",
      "class CMP extends React.PureComponent<Props, State> {",
      "  public static defaultProps = new Props();",
      "",
      "  render() {",
      "    const { } = this.props;",
      "",
      "    return (",
      "      <div />",
      "    );",
      "  }",
      "}",
      "",
      "export default CMP;",
      ""
    ],
    "description": "Class Componet"
  },
  "render callback component": {
    "prefix": "rcb",
    "body": [
      "import * as React from 'react';",
      "",
      "class State { }",
      "",
      "interface RenderCallbackComponentProps { }",
      "",
      "type RenderCallback = (args: RenderCallbackComponentProps) => JSX.Element;",
      "",
      "type Props = Partial<{",
      "  children: RenderCallback;",
      "  render: RenderCallback;",
      "}>;",
      "",
      "class Rcb extends React.PureComponent<Props, State> {",
      "  state: State = new State();",
      "",
      "  render() {",
      "    const { render, children } = this.props;",
      "",
      "    if (render) {",
      "      return render(renderProps);",
      "    }",
      "",
      "    if (children instanceof Function) {",
      "      return children(renderProps);",
      "    }",
      "",
      "    return null;",
      "  }",
      "}",
      "",
      "export default Rcb;"
    ],
    "description": "render callback component"
  },
  "high order component": {
    "prefix": "hoc",
    "body": [
      "import * as React from 'react';",
      "import * as Recompose from 'recompose';",
      "",
      "type Omit<T, K> = Pick<T, Exclude<keyof T, K>>;",
      "type Subtract<T, K> = Omit<T, keyof K>;",
      "",
      "class OwnState { }",
      "",
      "type ref = React.Ref<any>;",
      "",
      "interface InjectedProps {",
      "  ref?: ref;",
      "}",
      "",
      "interface OwnProps {",
      "  forwardedRef?: ref;",
      "}",
      "",
      "interface Options {}",
      "",
      "const withSth = ({}: Options = {}) => <P extends InjectedProps>(",
      "  Component: React.ComponentType<P>,",
      ") => {",
      "  type Props = Subtract<P, InjectedProps> & OwnProps;",
      "  class HOC extends React.Component<",
      "    Props,",
      "    OwnState",
      "  > {",
      "    static readonly displayName = Recompose.wrapDisplayName(Component, 'hoc'); ",
      "    state: OwnState = new OwnState();",
      "",
      "    render() {",
      "      const { forwardedRef, ...rest } = this.props as OwnProps;",
      "",
      "      return (",
      "        <div>",
      "          <Component ref={forwardedRef} {...rest} x={this.state.x} y={this.state.y} />",
      "        </div>",
      "      );",
      "    }",
      "  }",
      "",
      "  return React.forwardRef((props: Props, ref?) => {",
      "    return <HOC {...props} forwardedRef={ref} />;",
      "  });",
      "}",
      "",
      "export default withSth;"
    ],
    "description": "high order component"
  }
}